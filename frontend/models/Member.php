<?php

namespace frontend\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "member".
 *
 * @property integer $id
 * @property string $username
 * @property string $auth_key
 * @property string $password_hash
 * @property string $email
 * @property string $tel
 * @property integer $last_login_time
 * @property integer $last_login_ip
 * @property integer $status
 * @property integer $create_at
 * @property integer $updated_at
 */
class Member extends \yii\db\ActiveRecord implements IdentityInterface
{
    public $password_1;
    public $password_2;
    public $code;
    public $smscode;

    public static $statusOptions = [1=>'正常',0=>'删除'];
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'member';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['username','password_1','tel'],'required'],
            [['username'], 'string', 'max' => 50],
            [['password_hash', 'email'], 'string', 'max' => 100],
            [ 'email','email'],
            [['tel'], 'string','min'=>11, 'max' => 11],
            ['code','captcha'],
            ['password_2','compare','compareAttribute'=>'password_1','message'=>'两次密码必须一致'],
            ['smscode','validateSms']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => '用户名：',
            'auth_key' => 'Auth Key',
            'password_1' => '密码：',
            'password_2' => '确认密码：',
            'password_hash' => '密码：',
            'email' => '邮箱：',
            'tel' => '手机号码：',
            'last_login_time' => '最后登录时间',
            'last_login_ip' => '最后登录ip',
            'status' => '状态',
            'create_at' => '添加时间',
            'updated_at' => '修改时间',
            'code' => '验证码：',
            'smscode' => '短信验证：'
        ];
    }
    public function validateSms(){
        if (Yii::$app->session->get('tel'.$this->tel) != $this->smscode){
            $this->addError('smscode','短信验证码错误');
        }
    }
    public function beforeSave($insert)
    {
        if ($insert){
            $this->create_at=time();
            $this->status=1;
            $this->password_hash = Yii::$app->security->generatePasswordHash($this->password_1);
            $this->auth_key=Yii::$app->security->generateRandomString();
        }else{

        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    //关联地址
    public function getAddress(){
        return $this->hasMany(Address::className(),['member_id'=>'id']);
    }
    //关联购物车
    public function getCart(){
        return $this->hasMany(Cart::className(),['member_id'=>'id']);
    }
    //通过购物车关联商品

    /**
     * Finds an identity by the given ID.
     * @param string|int $id the ID to be looked for
     * @return IdentityInterface the identity object that matches the given ID.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentity($id)
    {
        return self::findOne(['id'=>$id]);
        // TODO: Implement findIdentity() method.
    }

    /**
     * Finds an identity by the given token.
     * @param mixed $token the token to be looked for
     * @param mixed $type the type of the token. The value of this parameter depends on the implementation.
     * For example, [[\yii\filters\auth\HttpBearerAuth]] will set this parameter to be `yii\filters\auth\HttpBearerAuth`.
     * @return IdentityInterface the identity object that matches the given token.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        // TODO: Implement findIdentityByAccessToken() method.
    }

    /**
     * Returns an ID that can uniquely identify a user identity.
     * @return string|int an ID that uniquely identifies a user identity.
     */
    public function getId()
    {
        return $this->id;
        // TODO: Implement getId() method.
    }

    /**
     * Returns a key that can be used to check the validity of a given identity ID.
     *
     * The key should be unique for each individual user, and should be persistent
     * so that it can be used to check the validity of the user identity.
     *
     * The space of such keys should be big enough to defeat potential identity attacks.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @return string a key that is used to check the validity of a given identity ID.
     * @see validateAuthKey()
     */
    public function getAuthKey()
    {
        return $this->auth_key;
        // TODO: Implement getAuthKey() method.
    }

    /**
     * Validates the given auth key.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @param string $authKey the given auth key
     * @return bool whether the given auth key is valid.
     * @see getAuthKey()
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() == $authKey;
        // TODO: Implement validateAuthKey() method.
    }
}
